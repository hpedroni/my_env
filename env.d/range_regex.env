#
# shellcheck disable=SC2148
# Usage: range_regex HH:MM HH:MM or range_regex <MINUTES>
# Ex:
#   range_regex 11:00 12:00
#   range_regex 10
# Output:
#   A regex containing the time range specified
#
range_regex () {
    # Z5 will add leading zeros in the input string, if the user gives 8:00 will convert it to 08:00
    # 5 is the string's final size
    _START_TIME="$1"
    _END_TIME="$2"

    # In case user provided 2 parameters
    if [ -z "$2" ]; then
        _LAST_MINUTES="$1"
        _START_TIME=$(perl -e 'use POSIX qw/strftime/; print strftime("%H:%M",localtime(time()-('"$_LAST_MINUTES"'*60)))');
        _END_TIME=$(perl -e 'use POSIX qw/strftime/; print strftime("%H:%M",localtime(time()-60))');
    fi

    # validate if both inputs are valid dates
    _VALIDATE_TIME_RE="[0-9]{2}:[0-9]{2} [0-9]{2}:[0-9]{2}"
    _RESULT=$(echo "$_START_TIME $_END_TIME" | perl -ne 'print 1 if (/[0-9]{2}:[0-9]{2} [0-9]{2}:[0-9]{2}/)')
    [ "$_RESULT" -eq 0 ] && print "Invalid range" && return 1

    # Generate the time range regex
    _REGEX=$(
    echo "$_START_TIME:$_END_TIME" | perl -ne '
    use Time::Local;
    use POSIX qw/strftime/;

    # Split the input times, input will be HH:MM:HH:MM
    my ($h1,$m1,$h2,$m2) = split(/:/);

    # Convert to timestamp
    my $t1 = timelocal(0,$m1,$h1,1,0,0);
    my $t2 = timelocal(0,$m2,$h2,1,0,0);

    # The difference between the two timestamps divided by 60 will give the amount of minutes
    # between the start and end times, now that we know how many minutes we have we are going
    # to generate all the minutes in the range, and store the output in the hash
    my $diff = (($t2 - $t1) / 60);
    my %TimeHash = ();

    for (my $i=0; $i<=$diff; $i++){
        # Convert the timestamp to string them split HH:MM into HH M M
        if (strftime("%H:%M", localtime(($t1 + $i*60))) =~ /([0-9]{2}):([0-9])([0-9])/) {
            $TimeHash->{$1}->{$2}->{$3} = "";
        }
    }

    my $FinalRegex = "";

    for my $HH (sort keys %$TimeHash){
        my $local_re = "";
        my $HH_size  = 0;

        for my $M (sort keys %{$TimeHash->{$HH}}){
            my $M_size = keys(%{$TimeHash->{$HH}->{$M}});

            # If the minute size is equal 10, it means we can use HH:M as we have 0 to 9 in the last minute part
            if ($M_size == 10){
                $HH_size += 10;
                $local_re .= "$HH:$M|";
            } else {
                # If not then we need the entire HH:MM part
                for my $M2 (sort keys %{$TimeHash->{$HH}->{$M}}){
                    $local_re .="$HH:$M$M2|";
                }
            }
        }
        # if the size is equal 60 this means we have an entire hour, so we dont need its minutes
        # lets just grab the HH part
        if ($HH_size == 60) {
            $FinalRegex .= "$HH|";
        } else {
            # The hour is not complete so we need the HH:M/HH:MM part
            $FinalRegex .= "$local_re"
        }
    }
    print "$FinalRegex\n";
    ')
    echo "${_REGEX%?}"
    return 0
}